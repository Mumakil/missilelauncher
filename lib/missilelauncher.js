// Generated by CoffeeScript 1.4.0
(function() {
  var HID, Missilelauncher, Q, commands, defaultConfig, extend,
    __slice = [].slice;

  HID = require('node-hid');

  Q = require('q');

  extend = function() {
    var dest, key, source, src, _i, _j, _len, _len1, _ref;
    dest = arguments[0], source = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    for (_i = 0, _len = source.length; _i < _len; _i++) {
      src = source[_i];
      if (typeof src === 'object') {
        _ref = Object.keys(src);
        for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
          key = _ref[_j];
          if (typeof src[key] === 'object') {
            dest[key] = extend({}, dest[key], src[key]);
          } else {
            dest[key] = src[key];
          }
        }
      }
    }
    return dest;
  };

  defaultConfig = {
    time: {
      fullTurn: 5465,
      fullPitch: 835,
      fire: 3500
    },
    angle: {
      horizontal: {
        max: 138,
        min: -138
      },
      vertical: {
        max: 28,
        min: -6
      }
    },
    log: true
  };

  commands = {
    DOWN: 0x01,
    UP: 0x02,
    LEFT: 0x04,
    RIGHT: 0x08,
    FIRE: 0x10,
    STOP: 0x20
  };

  Missilelauncher = (function() {

    Missilelauncher.findLaunchers = function() {
      var device, devices, launchers, match;
      devices = HID.devices();
      match = function(device) {
        return device.vendorId === Missilelauncher.vendorId && device.productId === Missilelauncher.productId;
      };
      return launchers = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = devices.length; _i < _len; _i++) {
          device = devices[_i];
          if (match(device)) {
            _results.push(device.path);
          }
        }
        return _results;
      })();
    };

    Missilelauncher.defaultConfig = defaultConfig;

    Missilelauncher.vendorId = 0x2123;

    Missilelauncher.productId = 0x1010;

    Missilelauncher.commands = commands;

    function Missilelauncher(options) {
      var config;
      config = extend({}, Missilelauncher.defaultConfig, options.config);
      this.config = extend(config, {
        angle: {
          vertical: {
            full: config.angle.vertical.max - config.angle.vertical.min,
            rate: config.time.fullPitch / (config.angle.vertical.max - config.angle.vertical.min)
          },
          horizontal: {
            full: config.angle.horizontal.max - config.angle.horizontal.min,
            rate: config.time.fullTurn / (config.angle.horizontal.max - config.angle.horizontal.min)
          }
        }
      });
      if (options.device) {
        this.device = options.device;
      } else {
        this.device = new HID.HID(options.path);
      }
      this.busy = false;
      this.direction = {};
    }

    Missilelauncher.prototype._sendCommand = function(command) {
      var cmd;
      if (typeof command !== 'string') {
        return false;
      }
      cmd = Missilelauncher.commands[command.toUpperCase()];
      return this.device.write([0x02, cmd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]);
    };

    Missilelauncher.prototype.move = function(direction, duration) {
      var ready,
        _this = this;
      if (this.busy) {
        return;
      }
      this._log("Move " + direction + " for " + duration);
      this.busy = true;
      ready = Q.defer();
      this._sendCommand(direction);
      setTimeout(function() {
        _this._sendCommand('STOP');
        _this.busy = false;
        return ready.resolve();
      }, duration);
      return ready.promise;
    };

    Missilelauncher.prototype.fire = function() {
      var ready,
        _this = this;
      if (this.busy) {
        return;
      }
      this._log("Firing!");
      this.busy = true;
      ready = Q.defer();
      this._sendCommand('FIRE');
      setTimeout(function() {
        _this.busy = false;
        return ready.resolve();
      }, this.config.time.fire);
      return ready.promise;
    };

    Missilelauncher.prototype.pause = function(duration) {
      var ready,
        _this = this;
      if (this.busy) {
        return;
      }
      this._log("Pause for " + duration);
      this.busy = true;
      ready = Q.defer();
      setTimeout(function() {
        _this.busy = false;
        return ready.resolve();
      }, duration);
      return ready.promise;
    };

    Missilelauncher.prototype.reset = function() {
      this._log('Resetting...');
      this.direction = {
        horizontal: this.config.angle.horizontal.min,
        vertical: this.config.angle.vertical.min
      };
      return this.sequence(["DOWN " + this.config.time.fullPitch, "LEFT " + this.config.time.fullTurn]);
    };

    Missilelauncher.prototype.sequence = function(commandSequence) {
      var cmd, next, parsedSequence, ready;
      if (!commandSequence || commandSequence.length === 0) {
        return Q.defer().resolve().promise;
      }
      parsedSequence = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = commandSequence.length; _i < _len; _i++) {
          cmd = commandSequence[_i];
          _results.push(this.parseCommand(cmd));
        }
        return _results;
      }).call(this);
      ready = parsedSequence.shift()();
      while (next = parsedSequence.shift()) {
        (function() {
          cmd = next;
          return ready = ready.then(cmd);
        })();
      }
      return ready;
    };

    Missilelauncher.prototype.parseCommand = function(cmd) {
      var command, duration, _ref,
        _this = this;
      _ref = cmd.split(/\s/), command = _ref[0], duration = _ref[1];
      if (duration) {
        duration = parseInt(duration, 10);
      }
      if (command === 'FIRE') {
        return function() {
          return _this.fire();
        };
      } else if (command === 'RESET') {
        return function() {
          return _this.reset();
        };
      } else if (command === 'PAUSE') {
        return function() {
          return _this.pause(duration);
        };
      } else if (command === 'UP' || command === 'DOWN' || command === 'LEFT' || command === 'RIGHT') {
        return function() {
          return _this.move(command, duration);
        };
      } else {
        throw "" + command + " is not a valid command";
      }
    };

    Missilelauncher.prototype._limitTurning = function(angle, direction) {
      console.log('LIMIT TURNING', angle, direction, this.direction[direction]);
      if (this.direction[direction] + angle > this.config.angle[direction].max) {
        return this.config.angle[direction].max - this.direction[direction];
      } else if (this.direction[direction] + angle < this.config.angle[direction].min) {
        return this.config.angle[direction].min - this.direction[direction];
      } else {
        return angle;
      }
    };

    Missilelauncher.prototype.turnBy = function(angle) {
      var direction, duration;
      direction = angle > 0 ? 'RIGHT' : 'LEFT';
      console.log('h angle was', angle);
      angle = this._limitTurning(angle, 'horizontal');
      console.log('h angle is', angle);
      duration = this.timeToTurn({
        horizontal: angle
      }, null, false);
      console.log('h duration is', duration);
      this.direction.horizontal += angle;
      this._log("Turn", direction, 'by', angle, 'deg in', duration, 'ms');
      return this.move(direction, duration);
    };

    Missilelauncher.prototype.pitchBy = function(angle) {
      var direction, duration;
      direction = angle > 0 ? 'UP' : 'DOWN';
      console.log('v angle was', angle);
      angle = this._limitTurning(angle, 'vertical');
      console.log('v angle is', angle);
      duration = this.timeToTurn({
        vertical: angle
      }, null, false);
      console.log('v duration is', duration);
      this.direction.vertical += angle;
      this._log("Turn", direction, 'by', angle, 'deg in', duration, 'ms');
      return this.move(direction, duration);
    };

    Missilelauncher.prototype.pointTo = function(horizontal, vertical) {
      var _ref,
        _this = this;
      if (typeof horizontal === 'object') {
        _ref = horizontal, horizontal = _ref.horizontal, vertical = _ref.vertical;
      }
      return this.pitchBy(vertical - this.direction.vertical).then(function() {
        return _this.turnBy(horizontal - _this.direction.horizontal);
      });
    };

    Missilelauncher.prototype.timeToTurn = function(horizontal, vertical, absolute) {
      var time, _ref;
      if (absolute == null) {
        absolute = true;
      }
      if (typeof (horizontal != null) === 'object') {
        _ref = horizontal, horizontal = _ref.horizontal, vertical = _ref.vertical;
      }
      time = 0;
      if (horizontal != null) {
        if (absolute) {
          horizontal = horizontal - this.direction.horizontal;
        }
        horizontal = this._limitTurning(horizontal, 'horizontal');
        time += Math.round(Math.abs(horizontal) * this.config.angle.horizontal.rate);
      }
      if (vertical != null) {
        if (absolute) {
          vertical = vertical - this.direction.vertical;
        }
        vertical = this._limitTurning(vertical, 'vertical');
        time += Math.round(Math.abs(vertical) * this.config.angle.vertical.rate);
      }
      console.log('TIME TO TURN', (absolute ? 'to' : ''), horizontal, vertical, time);
      return time;
    };

    Missilelauncher.prototype.zero = function() {
      var _this = this;
      return this.reset().then(function() {
        return _this.pointTo(0, 0);
      });
    };

    Missilelauncher.prototype.fireAt = function(horizontal, vertical) {
      var _this = this;
      return this.pointTo(horizontal, vertical).then(function() {
        return _this.fire();
      });
    };

    Missilelauncher.prototype._log = function() {
      var text;
      text = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      if (this.config.log) {
        return console.log.apply(console, text);
      }
    };

    return Missilelauncher;

  })();

  module.exports = Missilelauncher;

}).call(this);
