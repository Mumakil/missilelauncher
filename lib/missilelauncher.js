// Generated by CoffeeScript 1.4.0
(function() {
  var HID, LAUNCHER_COMMANDS, MissileLauncher, PRODUCT_ID, Q, VENDOR_ID, defaultConfig, extend,
    __slice = [].slice;

  HID = require('node-hid');

  Q = require('q');

  LAUNCHER_COMMANDS = {
    DOWN: 0x01,
    UP: 0x02,
    LEFT: 0x04,
    RIGHT: 0x08,
    FIRE: 0x10,
    STOP: 0x20
  };

  VENDOR_ID = 0x2123;

  PRODUCT_ID = 0x1010;

  extend = function() {
    var dest, key, source, src, _i, _j, _len, _len1, _ref;
    dest = arguments[0], source = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    for (_i = 0, _len = source.length; _i < _len; _i++) {
      src = source[_i];
      if (typeof src === 'object') {
        _ref = Object.keys(src);
        for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
          key = _ref[_j];
          dest[key] = src[key];
        }
      }
    }
    return dest;
  };

  defaultConfig = {
    FULL_TURN_TIME: 5465,
    FULL_PITCH_TIME: 835,
    FIRING_TIME: 3500,
    FULL_HORIZONTAL_ANGLE: 330,
    FULL_VERTICAL_ANGLE: 35,
    MAX_HORIZONTAL_ANGLE: 138,
    MIN_HORIZONTAL_ANGLE: -138,
    MAX_VERTICAL_ANGLE: 28,
    MIN_VERTICAL_ANGLE: -6,
    log: true
  };

  MissileLauncher = (function() {

    MissileLauncher.findLaunchers = function() {
      var device, devices, launchers, match;
      devices = HID.devices();
      match = function(device) {
        return device.vendorId === VENDOR_ID && device.productId === PRODUCT_ID;
      };
      return launchers = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = devices.length; _i < _len; _i++) {
          device = devices[_i];
          if (match(device)) {
            _results.push(device.path);
          }
        }
        return _results;
      })();
    };

    MissileLauncher.defaultConfig = defaultConfig;

    function MissileLauncher(options) {
      this.config = extend({}, MissileLauncher.defaultConfig, options.config);
      this.config.FULL_VERTICAL_ANGLE = this.config.MAX_VERTICAL_ANGLE - this.config.MIN_VERTICAL_ANGLE;
      this.config.FULL_HORIZONTAL_ANGLE = this.config.MAX_HORIZONTAL_ANGLE - this.config.MIN_HORIZONTAL_ANGLE;
      this.config.HORIZONTAL_TURN_RATE = this.config.FULL_TURN_TIME / this.config.FULL_HORIZONTAL_ANGLE;
      this.config.VERTICAL_TURN_RATE = this.config.FULL_PITCH_TIME / this.config.FULL_VERTICAL_ANGLE;
      if (options.device) {
        this.device = options.device;
      } else {
        this.device = new HID.HID(options.path);
      }
      this.busy = false;
      this.verticalAngle = void 0;
      this.horizontalAngle = void 0;
    }

    MissileLauncher.prototype.sendCommand = function(command) {
      var cmd;
      if (typeof command !== 'string') {
        return false;
      }
      cmd = LAUNCHER_COMMANDS[command.toUpperCase()];
      return this.device.write([0x02, cmd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]);
    };

    MissileLauncher.prototype.move = function(direction, duration) {
      var ready,
        _this = this;
      if (this.busy) {
        return;
      }
      this._log("Move " + direction + " for " + duration);
      this.busy = true;
      ready = Q.defer();
      this.sendCommand(direction);
      setTimeout(function() {
        _this.sendCommand('STOP');
        _this.busy = false;
        return ready.resolve();
      }, duration);
      return ready.promise;
    };

    MissileLauncher.prototype.fire = function() {
      var ready,
        _this = this;
      if (this.busy) {
        return;
      }
      this._log("Firing!");
      this.busy = true;
      ready = Q.defer();
      this.sendCommand('FIRE');
      setTimeout(function() {
        _this.busy = false;
        return ready.resolve();
      }, this.config.FIRING_TIME);
      return ready.promise;
    };

    MissileLauncher.prototype.pause = function(duration) {
      var ready,
        _this = this;
      if (this.busy) {
        return;
      }
      this._log("Pause for " + duration);
      this.busy = true;
      ready = Q.defer();
      setTimeout(function() {
        _this.busy = false;
        return ready.resolve();
      }, duration);
      return ready.promise;
    };

    MissileLauncher.prototype.reset = function() {
      this._log('Resetting...');
      this.verticalAngle = this.config.MIN_VERTICAL_ANGLE;
      this.horizontalAngle = this.config.MIN_HORIZONTAL_ANGLE;
      return this.sequence(["DOWN " + this.config.FULL_PITCH_TIME, "LEFT " + this.config.FULL_TURN_TIME]);
    };

    MissileLauncher.prototype.sequence = function(commandSequence) {
      var cmd, next, parsedSequence, ready;
      if (!commandSequence || commandSequence.length === 0) {
        return Q.defer().resolve().promise;
      }
      parsedSequence = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = commandSequence.length; _i < _len; _i++) {
          cmd = commandSequence[_i];
          _results.push(this.parseCommand(cmd));
        }
        return _results;
      }).call(this);
      ready = parsedSequence.shift()();
      while (next = parsedSequence.shift()) {
        (function() {
          cmd = next;
          return ready = ready.then(cmd);
        })();
      }
      return ready;
    };

    MissileLauncher.prototype.parseCommand = function(cmd) {
      var command, duration, _ref,
        _this = this;
      _ref = cmd.split(/\s/), command = _ref[0], duration = _ref[1];
      if (duration) {
        duration = parseInt(duration, 10);
      }
      if (command === 'FIRE') {
        return function() {
          return _this.fire();
        };
      } else if (command === 'RESET') {
        return function() {
          return _this.reset();
        };
      } else if (command === 'PAUSE') {
        return function() {
          return _this.pause(duration);
        };
      } else if (command === 'UP' || command === 'DOWN' || command === 'LEFT' || command === 'RIGHT') {
        return function() {
          return _this.move(command, duration);
        };
      } else {
        throw "" + command + " is not a valid command";
      }
    };

    MissileLauncher.prototype.turnBy = function(angle) {
      var direction, duration;
      direction = angle > 0 ? 'RIGHT' : 'LEFT';
      duration = Math.round(Math.abs(angle) * this.config.HORIZONTAL_TURN_RATE);
      this.horizontalAngle += angle;
      this._log("Turn", direction, 'by', angle, 'deg in', duration, 'ms');
      return this.move(direction, duration);
    };

    MissileLauncher.prototype.pitchBy = function(angle) {
      var direction, duration;
      direction = angle > 0 ? 'UP' : 'DOWN';
      duration = Math.round(Math.abs(angle) * this.config.VERTICAL_TURN_RATE);
      this.verticalAngle += angle;
      this._log("Turn", direction, 'by', angle, 'deg in', duration, 'ms');
      return this.move(direction, duration);
    };

    MissileLauncher.prototype.pointTo = function(horizontalAngle, verticalAngle) {
      var _this = this;
      if (horizontalAngle > this.config.MAX_HORIZONTAL_ANGLE) {
        horizontalAngle = this.config.MAX_HORIZONTAL_ANGLE;
      }
      if (horizontalAngle < this.config.MIN_HORIZONTAL_ANGLE) {
        horizontalAngle = this.config.MIN_HORIZONTAL_ANGLE;
      }
      if (verticalAngle > this.config.MAX_VERTICAL_ANGLE) {
        verticalAngle = this.config.MAX_VERTICAL_ANGLE;
      }
      if (verticalAngle < this.config.MIN_VERTICAL_ANGLE) {
        verticalAngle = this.config.MIN_VERTICAL_ANGLE;
      }
      return this.pitchBy(verticalAngle - this.verticalAngle).then(function() {
        return _this.turnBy(horizontalAngle - _this.horizontalAngle);
      });
    };

    MissileLauncher.prototype.zero = function() {
      var _this = this;
      return this.reset().then(function() {
        return _this.pointTo(0, 0);
      });
    };

    MissileLauncher.prototype.fireAt = function(horizontalAngle, verticalAngle) {
      var _this = this;
      return this.pointTo(horizontalAngle, verticalAngle).then(function() {
        return _this.fire();
      });
    };

    MissileLauncher.prototype._log = function() {
      var text;
      text = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      if (this.config.log) {
        return console.log.apply(console, text);
      }
    };

    return MissileLauncher;

  })();

  module.exports = MissileLauncher;

}).call(this);
